#!/bin/bash

changed=false
failed=false
res_code=0
msg=Success
exec 3>&1 >/dev/null 2>&1
trap 'failed=true res_code=1 msg="Failed at line $LINENO"' ERR

name=
after=
image=
flags=
. "$1"

changed=true

cat <<EOF >/tmp/$$.1
[Unit]
Description=Container $name
Requires=docker.io.service
After=docker.io.service $after

[Service]
Restart=always
ExecStart=/usr/local/bin/docker-start-run $name $flags $image
ExecStop=/usr/bin/docker stop -t 2 $name

[Install]
WantedBy=multi-user.target
EOF

:> /tmp/$$.2
chmod +x /tmp/$$.2
cat >>/tmp/$$.2 <<"EOF"
#!/bin/bash

name="$1"
shift

if ! id="$(/usr/bin/docker inspect --format="{{.ID}}" "$name-data" 2>/dev/null)"; then
  echo "Reusing $id"
  docker run --name "$name-data" --volumes-from "$name-data" --entrypoint /bin/true "$@"
fi

/usr/bin/docker rm "$name" 2>/dev/null
set -x
exec /usr/bin/docker run --name="$name" --volumes-from="$name-data" --rm --attach=stdout --attach=stderr "$@"

if docker inspect --format="Reusing {{.ID}}" "$name" 2>/dev/null; then
  exec /usr/bin/docker start -a "$name"
else
  exec /usr/bin/docker run --name="$name" --volumes-from="$name-data" --attach=stdout --attach=stderr "$@"
fi
EOF

if ! cmp /tmp/$$.2 /usr/local/bin/docker-start-run; then
    mv /tmp/$$.2 /usr/local/bin/docker-start-run
    chmod +x /usr/local/bin/docker-start-run
    changed=true
fi

if ! cmp /tmp/$$.1 /etc/systemd/system/$name.service; then
    mv /tmp/$$.1 /etc/systemd/system/$name.service
    systemctl daemon-reload
    changed=true
fi

rm -f /tmp/$$.1 /tmp/$$.2

cat <<EOF >&3
{
    "failed":  $failed,
    "changed": $changed,
    "msg":     "$msg"
}
EOF
exit $res_code
